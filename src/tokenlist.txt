#
# $Revision: 1.17 $
#
# tokenlist.tcl -- 
#
#     This file contains raw data used to build a database of tag
#     information used by tkhtml at runtime. Most of the information in
#     this file comes from the SGML specification of the various versions
#     of the HTML language. Also, some html tags require a special C
#     structure to be allocated for some specific use. This file identifies
#     these tags.
#
#     In an HTML document, some elements have implicit close tags (some
#     also have optional open tags, but this is handled entirely in
#     htmltree.c). To build the correct document tree from an HTML file
#     tkhtml needs to know about this. So this file contains enough
#     information to allow implicit close tags to be determined. 
#
#     The rules for implicit closes in HTML are summarised in the 
#     following table:
#
#     Tag        | Allowed content
#     -------------------------------
#     <p>        | %inline only.
#     <colgroup> | <col> only.
#     <dd>       | %flow
#     <dt>       | %inline only.
#     <li>       | %flow
#     <option>   | #PCDATA only.
#     <td>       | %flow
#     <tfoot>    | <tr> only.
#     <th>       | %flow
#     <thead>    | <tr> only
#     <tr>       | <TH> or <TD> only.
#
#     Of course, all implicit closes are illegal in XHTML, which is what
#     everyone should be using soon (yeah right!).
#
# -------------------------------------------------------------------
#
# This source code is released into the public domain by the author,
# D. Richard Hipp, on 2002 December 17.  Instead of a license, here
# is a blessing:
#
#    May you do good and not evil.
#    May you find forgiveness for yourself and forgive others.
#    May you share freely, never taking more than you give.
#

###########################################################################
proc TAG {args} {
    lappend ::tagscript [concat _TAG $args]
}
#
# File Format:
#
#     This file is sourced by a Tcl interpreter. The global 'TAG'
#     command is used to add a new tag to the internal database. The
#     Tcl script outputs C-code which is used to build a runtime
#     version of the same database.
#
#     TAG tag-name 
#         ?-content (content function)?
#         ?-flow (inline|block)?
#
TAG a -flow inline
# TAG abbr
# TAG acronym
TAG address
TAG applet
TAG area -content HtmlEmptyContent
TAG base -content HtmlEmptyContent             
TAG basefont
TAG b -flow inline
# TAG bdo
TAG big -flow inline
TAG blockquote -flow block
TAG body       
TAG br -content HtmlEmptyContent -flow inline
# TAG button
TAG caption 
TAG center -flow block
TAG cite -flow inline
TAG code -flow inline
# TAG col
# TAG colgroup -content HtmlColgroupContent
TAG dd -content HtmlLiContent
# TAG del
TAG dfn -flow inline
TAG dir -flow block
TAG div -flow block
TAG dl -flow block -content HtmlDlContent
TAG dt -content HtmlLiContent
TAG em -flow inline
# TAG fieldset
TAG font -flow inline
TAG form -flow block
TAG frame
TAG frameset
TAG h1 -flow block
TAG h2 -flow block
TAG h3 -flow block
TAG h4 -flow block
TAG h5 -flow block
TAG h6 -flow block
TAG head
TAG hr -content HtmlEmptyContent -flow block
TAG html                                
TAG i -flow inline
TAG iframe -content HtmlEmptyContent
TAG img -content HtmlEmptyContent -flow inline
TAG input -content HtmlEmptyContent -flow inline
TAG isindex -flow block
TAG kbd -flow inline
# TAG label
# TAG legend
TAG li -content HtmlLiContent
TAG link -content HtmlEmptyContent  
TAG map -flow inline
TAG menu -flow block
TAG meta -content HtmlEmptyContent 
TAG noframes
TAG noscript                            
TAG object
TAG ol -flow block -content HtmlUlContent
# TAG optgroup
TAG option                              
TAG p -flow block -content HtmlInlineContent
TAG param
TAG pre -flow block
# TAG q
TAG s -flow inline
TAG samp -flow inline
TAG script -content HtmlEmptyContent -flow inline
TAG select -flow inline
TAG small -flow inline
TAG span -flow inline
TAG strike -flow inline
TAG strong -flow inline
TAG style -content HtmlEmptyContent
TAG sub -flow inline
TAG sup -flow inline
TAG table -flow block -content HtmlTableContent
# TAG tbody
TAG td -content HtmlTableCellContent
TAG textarea -flow inline
# TAG tfoot
TAG th -content HtmlTableCellContent
# TAG thead
TAG title
TAG tr -content HtmlTableRowContent
TAG tt -flow inline
TAG u -flow inline
TAG ul -flow block -content HtmlUlContent
TAG var -flow inline

#     The tags listed above are the complete set of HTML 4.01 tags. Some
#     are commented out because we don't support them in any way.
#
#     Tkhtml also supports the tags below. They are no longer inluded
#     in the standard as of HTML 4.01. Supporting these tags is a low
#     priority.
#
TAG comment
TAG embed
TAG listing                             
TAG marquee                             
TAG nextid -content HtmlEmptyContent             
TAG nobr                                
TAG noembed                              
TAG plaintext -content HtmlEmptyContent             
TAG wbr -content HtmlEmptyContent 
TAG xmp 
TAG bgsound -content HtmlEmptyContent 

###########################################################################
# Below this line is the engine for processing the database declared 
# above. We produce a header file and an implemation file.
#

# The argument is the name of a list variable in the callers context. This
# proc returns and removes the first element of that list.
#
proc shift {list} {
    upvar $list l
    set ret [lindex $l 0]
    set l [lrange $l 1 end]
    return $ret
}

set ::nextfreeconst 0
proc _TAG {args} {

    set tag [lindex $args 0]

    # Parse the arguments. Default values are all zero.
    set flow 0
    set empty 0
    set xClose 0

    while {[llength $args]} {
        switch -exact -- [shift args] {
            -flow {
                 set flow HTMLTAG_[string toupper [shift args]]
            }
            -content {
                 set xClose [shift args]
            }
        }
    }

    # Insert the two constants for the tag into the header file.
    set header_format {#define % -20s %s}

    set opensym "Html_[string toupper $tag]"
    puts $::h_file [format $header_format $opensym $::nextfreeconst]
    incr ::nextfreeconst

    set closesym "Html_End[string toupper $tag]"
    puts $::h_file [format $header_format $closesym $::nextfreeconst]
    incr ::nextfreeconst

    # Insert the HtmlTokenMap record into the constant array.
    set fmt {  {% -15s % -18s %s %s %s},}
    set flags 0
    if {$flow!=0} {
        set flags $flow
    } 
    puts $::c_file [format $fmt "\"$tag\"," $opensym, $flags, $xClose, 0]
    set flags HTMLTAG_END
    puts $::c_file [format $fmt "\"/$tag\"," $closesym, $flags, 0, 0]
}

# Open the files htmltokens.c and htmltokens.h for writing. Write a
# warning to the top of each that they are generated files.
#
set c_file [open htmltokens.c w]
set h_file [open htmltokens.h w]
set warning {
/* 
 * DO NOT EDIT!
 *
 * The code in this file was automatically generated. See the files
 * src/tokenlist.txt and tools/maketokens.tcl from the tkhtml source
 * distribution.
 */
}
puts $c_file $warning
puts $h_file $warning

puts -nonewline $h_file {
#define Html_Text    1
#define Html_Space   2
#define Html_Unknown 3
#define Html_Block   4
#define HtmlIsMarkup(X) ((X)->base.type>Html_Block)
}
set ::nextfreeconst 5

# puts $c_file {#include "html.h"}
puts $c_file "HtmlTokenMap HtmlMarkupMap\[] = {"

# Evaluate the calls to TAG from the database specified above.
foreach l $::tagscript {eval $l}

set c $::nextfreeconst
puts $h_file "#define Html_TypeCount $c"
puts $h_file "#define HTML_MARKUP_HASH_SIZE [expr $c+11]"
puts $h_file "#define HTML_MARKUP_COUNT [expr $c-5]"

puts $c_file "};"

# Close the two generated files.
close $c_file
close $h_file

