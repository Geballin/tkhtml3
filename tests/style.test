
# Test script for Tkhtml
proc sourcefile {file} {
  set fname [file join [file dirname [info script]] $file] 
  uplevel #0 [list source $fname]
}
sourcefile common.tcl

html .h
.h handler script style styleHandler 
proc styleHandler {data} {
  .h style $data
}

proc property {node prop} {
  array set properties [$node prop]
  return $properties($prop)
}

#--------------------------------------------------------------------------
# Test cases style-1.* test the parsing of the 'background-position' property.
#
tcltest::test style-1.0 {} -body {
  .h parse -final {
    <html>
    <style>
      .one {background-position: 50% 50%}
      .two {background-position: center center}
      .three {background-position: 111 222}
    </style>
    <body>
    <div class="one"/>
    <div class="two"/>
    <div class="three"/>
    <div class="four"/>
    </body>
    </html>
  }

  set node [lindex [.h search .one] 0]
  property $node background-position
} -result {50.00% 50.00%}

tcltest::test style-1.1 {} -body {
  set node [lindex [.h search .two] 0]
  property $node background-position
} -result {50.00% 50.00%}

tcltest::test style-1.2 {} -body {
  set node [lindex [.h search .three] 0]
  property $node background-position
} -result {111px 222px}


#--------------------------------------------------------------------------
# Test cases style-2.* test the parsing of the 'background' property.
#
tcltest::test style-2.0 {} -body {
  .h reset
  .h parse -final {
    <html>
    <style>
      .one {background: black url(shell-bg.jpg) 0 0 no-repeat fixed;}
      .two {background: black url(shell-bg.jpg) 50 no-repeat 100 fixed;}
    </style>
    <body>
    <div class="one"/>
    <div class="two"/>
    </body>
    </html>
  }

  set node [lindex [.h search .one] 0]
  property $node background-position
} -result {0px 0px}

tcltest::test style-2.1 {} -body {
  property $node background-color
} -result {black}

tcltest::test style-2.2 {} -body {
  set node2 [lindex [.h search .two] 0]
  property $node2 background-position
} -result {50px 100px}

tcltest::test style-2.3 {} -body {
  property $node2 background-repeat
} -result {no-repeat}

#--------------------------------------------------------------------------
# Test cases style-3.* test some selectors
#
tcltest::test style-3.0 {} -body {
  .h reset
  .h parse -final {
    <html>
    <style>
      i {color:red}
      body>b {color:red}
    </style>
    <body>
    <i>Hello</i>
    <b>Hello</i>
    </body>
    </html>
  }

  set node [lindex [.h search i] 0]
  property $node color
} -result {red}
tcltest::test style-3.1 {} -body {
  set node [lindex [.h search b] 0]
  property $node color
} -result {red}

#--------------------------------------------------------------------------
# The following tests (style-4.*) test the parsing of stylesheets.
#
proc parse_stylesheet {stylesheet_text} {
  html .newwidget -defaultstyle ""
  .newwidget style $stylesheet_text
  set ret [list]
  foreach r [.newwidget styleconfig] {
    lappend ret [lrange $r 0 1]
  }
  destroy .newwidget
  return $ret
}

#
# Test 4.1 tests the bug reported by ticket #43. The embedded stylesheet
# contains an error - a ":" character is missing from a declaration. The
# correct behaviour is to ignore the broken declaration and resume
# parsing after the following semi-colon. In other words, the style-sheet
# specified in the <STYLE> element should parse identically to:
#
#     div {
#         color: red;
#         background-color: green;
#     }
#
tcltest::test style-4.1.1 {} -body {
  parse_stylesheet {
      div {
        color: red;
        garbage moregarbage;
        background-color: green;
      }
  }
} -result {{div {color:red; background-color:green}}}

# Test 4.2 tests that semi-colons are treated correctly. 
tcltest::test style-4.2.1 {} -body {
  parse_stylesheet {
      div {
        color: red;; ; background-color: green
      }
  }
} -result {{div {color:red; background-color:green}}}
tcltest::test style-4.2.2 {} -body {
  parse_stylesheet {
      div {
        ;color: red;; ; background-color: green; ; ;
      ;}
  }
} -result {{div {color:red; background-color:green}}}

# Test 4.3 tests for parsing errors using the examples given in the CSS 2.1
# specification, section 4.2. All of the following declarations should
# be equivalent to "p {color:green}".
set tn 1
foreach ss [list \
  {p { color:green }}                                    \
  {p { color:green; color }}                             \
  {p { color:red;   color; color:green }}                \
  {p { color:green; color: }}                            \
  {p { color:red;   color:; color:green }}               
# TODO: The following two cases are broken:
# {p { color:green; color{;color:maroon} }}              
# {p { color:red;   color{;color:maroon}; color:green }} 
] {
  tcltest::test style-4.3.$tn {} -body {
    parse_stylesheet $ss
  } -result {{p color:green}}
  incr tn
}

finish_test

